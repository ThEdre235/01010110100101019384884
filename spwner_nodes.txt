-- Entity Spawner - Script Principal com Shake Screen e Pathfinding Dinâmico
-- Este script deve ser hospedado e chamado via loadstring

return function(Entity)
	--=== Variáveis e serviços ===--
	local Players = game:GetService("Players")
	local TweenService = game:GetService("TweenService")
	local Workspace = game:GetService("Workspace")
	local RunService = game:GetService("RunService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	--=== SISTEMA DE SHAKE SCREEN ===--
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")
	local camShaker = nil

	-- Inicializa o sistema de shake
	local function initializeShakeSystem()
		local success, result = pcall(function()
			return require(playerGui:WaitForChild("MainUI")
				:WaitForChild("Initiator")
				:WaitForChild("Main_Game")).camShaker
		end)
		
		if success and result then
			camShaker = result
			return true
		else
			warn("Erro ao carregar sistema de shake da câmera.")
			return false
		end
	end

	-- Configuração padrão de shake
	local ShakeSettings = {
		Enabled = true,
		MaxDistance = 80,     -- Distância máxima para shake
		MinDistance = 5,      -- Distância mínima (shake máximo)
		MaxMagnitude = 4,     -- Magnitude máxima (perto)
		MinMagnitude = 0.5,   -- Magnitude mínima (longe)
		Roughness = 15,       -- Vibração
		FadeIn = 0.1,         -- Tempo para começar
		FadeOut = 0.8,        -- Tempo para desaparecer
		UpdateInterval = 0.1  -- Intervalo entre updates de shake
	}

	-- Função que calcula a intensidade do shake baseada na distância
	local function calculateShakeIntensity(distance, settings)
		if distance > settings.MaxDistance then
			return 0
		end
		if distance <= settings.MinDistance then
			return settings.MaxMagnitude
		end
		local normalizedDistance = (distance - settings.MinDistance) / (settings.MaxDistance - settings.MinDistance)
		local intensity = settings.MaxMagnitude - (normalizedDistance * (settings.MaxMagnitude - settings.MinMagnitude))
		return math.max(0, intensity)
	end

	-- Função que aplica shake baseado na distância
	local function triggerDistanceShake(distance, customSettings)
		if not camShaker then return end
		local settings = customSettings or ShakeSettings
		if not settings.Enabled then return end
		local intensity = calculateShakeIntensity(distance, settings)
		if intensity > 0.1 then
			camShaker:ShakeOnce(
				intensity,
				settings.Roughness,
				settings.FadeIn,
				settings.FadeOut
			)
		end
	end

	-- Sistema de monitoramento de shake contínuo
	local function startShakeSystem(entityModel, movePart, shakeSettings)
		if not shakeSettings or not shakeSettings.Enabled then
			return
		end
		if not camShaker then
			initializeShakeSystem()
		end
		if not camShaker then
			warn("Sistema de shake não pôde ser inicializado.")
			return
		end
		local lastShakeTime = 0
		local settings = shakeSettings or ShakeSettings
		local shakeConn
		shakeConn = RunService.Heartbeat:Connect(function()
			if not EntityState.isMoving then
				return
			end
			local currentTime = tick()
			if currentTime - lastShakeTime < settings.UpdateInterval then
				return
			end
			local character = player.Character
			local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
			if humanoidRootPart then
				local distance = (movePart.Position - humanoidRootPart.Position).Magnitude
				triggerDistanceShake(distance, settings)
				lastShakeTime = currentTime
			end
		end)
		entityModel.Destroying:Connect(function()
			if shakeConn then
				shakeConn:Disconnect()
			end
		end)
	end

	--=== CONTROLE DE ESTADO DA ENTIDADE ===--
	local EntityState = {
		isMoving = false,
		canKill = true,
		canBreakLights = true
	}

	--=== FUNÇÕES UTILITÁRIAS ===--
	local function withHeightOffset(cf, offset)
		return cf + Vector3.new(0, offset, 0)
	end

	local function getTweenTime(startCFrame, endCFrame, speed)
		local distance = (startCFrame.Position - endCFrame.Position).Magnitude
		return distance / speed
	end

	-- Retorna as salas existentes ordenadas
	local function getValidRoomNumbers()
		local currentRooms = Workspace.CurrentRooms:GetChildren()
		local roomNumbers = {}
		for _, room in ipairs(currentRooms) do
			local roomNum = tonumber(room.Name)
			if roomNum then
				table.insert(roomNumbers, roomNum)
			end
		end
		table.sort(roomNumbers)
		return roomNumbers
	end

	local function getMovePart(model)
		if model:FindFirstChild("RushNew") then
			return model.RushNew
		elseif model.PrimaryPart then
			return model.PrimaryPart
		else
			for _, v in ipairs(model:GetDescendants()) do
				if v:IsA("BasePart") then
					return v
				end
			end
		end
		return nil
	end

	--=== SISTEMA DE QUEBRA E FLICKER DE LUZES ===--
	local Module_Events = nil
	local function initializeLightSystem()
		local success, result = pcall(function()
			return require(ReplicatedStorage:WaitForChild("ClientModules"):WaitForChild("Module_Events"))
		end)
		if success and result then
			Module_Events = result
			return true
		else
			warn("Erro ao carregar Module_Events.")
			return false
		end
	end

	local function breakNearbyLights(entityPosition, settings)
		if not settings.LightBreaking.Enabled or not Module_Events or not Module_Events.shatter or not EntityState.canBreakLights then
			return
		end
		local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
		if not roomsFolder then
			return
		end
		local range = settings.LightBreaking.Range or 15
		local brokenRooms = {}
		for _, room in ipairs(roomsFolder:GetChildren()) do
			if room:IsA("Model") and not brokenRooms[room] then
				local roomCenter = room:GetModelCFrame().Position
				local distance = (entityPosition - roomCenter).Magnitude
				if distance <= range then
					pcall(function()
						Module_Events.shatter(room)
						brokenRooms[room] = true
					end)
				end
			end
		end
	end

	local function breakCurrentRoomLights(entityPosition, settings)
		if not settings.LightBreaking.Enabled or not Module_Events or not Module_Events.shatter or not EntityState.canBreakLights then
			return
		end
		local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
		if not roomsFolder then
			return
		end
		local closestRoom = nil
		local closestDistance = math.huge
		for _, room in ipairs(roomsFolder:GetChildren()) do
			if room:IsA("Model") then
				local roomCenter = room:GetModelCFrame().Position
				local distance = (entityPosition - roomCenter).Magnitude
				if distance < closestDistance then
					closestDistance = distance
					closestRoom = room
				end
			end
		end
		if closestRoom then
			pcall(function()
				Module_Events.shatter(closestRoom)
			end)
		end
	end

	local function flickerAllRooms(duration)
		if not Module_Events or not Module_Events.flicker then
			warn("Função flicker não encontrada no Module_Events.")
			return
		end
		local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
		if not roomsFolder then
			return
		end
		local rooms = roomsFolder:GetChildren()
		for _, room in ipairs(rooms) do
			if room:IsA("Model") then
				pcall(function()
					Module_Events.flicker(room, duration)
				end)
			end
		end
	end

	local function flickerNearbyRooms(entityPosition, settings)
		if not settings.LightFlicker.Enabled or not Module_Events or not Module_Events.flicker then
			return
		end
		local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
		if not roomsFolder then
			return
		end
		local duration = settings.LightFlicker.Duration or 7
		local flickeredRooms = {}
		for _, room in ipairs(roomsFolder:GetChildren()) do
			if room:IsA("Model") and not flickeredRooms[room] then
				pcall(function()
					Module_Events.flicker(room, duration)
					flickeredRooms[room] = true
				end)
			end
		end
	end

	local function flickerCurrentRoom(entityPosition, settings)
		if not settings.LightFlicker.Enabled or not Module_Events or not Module_Events.flicker then
			return
		end
		local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
		if not roomsFolder then
			return
		end
		local duration = settings.LightFlicker.Duration or 7
		local closestRoom = nil
		local closestDistance = math.huge
		for _, room in ipairs(roomsFolder:GetChildren()) do
			if room:IsA("Model") then
				local roomCenter = room:GetModelCFrame().Position
				local distance = (entityPosition - roomCenter).Magnitude
				if distance < closestDistance then
					closestDistance = distance
					closestRoom = room
				end
			end
		end
		if closestRoom then
			pcall(function()
				Module_Events.flicker(closestRoom, duration)
			end)
		end
	end

	--=== SISTEMA DE MONITORAMENTO DE LUZES ===--
	local function startLightBreaking(entityModel, movePart, settings)
		if not settings.LightBreaking.Enabled then
			return
		end
		if not Module_Events then
			initializeLightSystem()
		end
		if not Module_Events then
			warn("Sistema de quebra de luzes não pôde ser inicializado.")
			return
		end
		local lastPosition = movePart.Position
		local brokenRooms = {}
		local lightConn
		lightConn = RunService.Heartbeat:Connect(function()
			if not EntityState.isMoving then
				return
			end
			local currentPosition = movePart.Position
			if (currentPosition - lastPosition).Magnitude > 5 then
				if settings.LightBreaking.OnlyCurrentRoom then
					breakCurrentRoomLights(currentPosition, settings)
				else
					breakNearbyLights(currentPosition, settings)
				end
				lastPosition = currentPosition
			end
		end)
		entityModel.Destroying:Connect(function()
			if lightConn then
				lightConn:Disconnect()
			end
		end)
	end

	local function startLightFlicker(entityModel, movePart, settings)
		if not settings.LightFlicker.Enabled or not settings.LightFlicker.OnMovement then
			return
		end
		if not Module_Events then
			initializeLightSystem()
		end
		if not Module_Events then
			warn("Sistema de flicker não pôde ser inicializado.")
			return
		end
		local lastPosition = movePart.Position
		local flickeredRooms = {}
		local flickerConn
		flickerConn = RunService.Heartbeat:Connect(function()
			if not EntityState.isMoving then
				return
			end
			local currentPosition = movePart.Position
			if (currentPosition - lastPosition).Magnitude > 10 then
				if settings.LightFlicker.OnlyCurrentRoom then
					flickerCurrentRoom(currentPosition, settings)
				else
					flickerNearbyRooms(currentPosition, settings)
				end
				lastPosition = currentPosition
			end
		end)
		entityModel.Destroying:Connect(function()
			if flickerConn then
				flickerConn:Disconnect()
			end
		end)
	end

	--=== SISTEMA DE PATHFINDING DINÂMICO ===--
	local PathfindingState = {
		visitedNodes = {},
		currentRoomIndex = 1,
		currentNodeIndex = 1,
		totalRooms = 0,
		isReversed = false
	}

	-- Obtém nodes ordenados de uma sala, excluindo RoomStart e RoomEnd
	local function getOrderedNodes(room)
		local nodesFolder = room:FindFirstChild("Nodes")
		if not nodesFolder then return {} end
		local nodes = {}
		for _, node in ipairs(nodesFolder:GetChildren()) do
			local num = tonumber(node.Name)
			if num then
				nodes[#nodes+1] = {num=num, part=node}
			end
		end
		table.sort(nodes, function(a, b) return a.num < b.num end)
		local ordered = {}
		for _, n in ipairs(nodes) do
			if n.part.Name ~= "RoomStart" and n.part.Name ~= "RoomEnd" then
				table.insert(ordered, n.part)
			end
		end
		return ordered
	end

	local function getAllAvailableNodes(roomNumbers, isReversed)
		local allNodes = {}
		local nodeMap = {}
		if isReversed then
			for i = #roomNumbers, 1, -1 do
				local room = Workspace.CurrentRooms:FindFirstChild(tostring(roomNumbers[i]))
				if room then
					local nodes = getOrderedNodes(room)
					for j = #nodes, 1, -1 do
						local node = nodes[j]
						local nodeKey = tostring(roomNumbers[i]) .. "_" .. node.Name
						if not nodeMap[nodeKey] then
							table.insert(allNodes, {
								node = node,
								roomNumber = roomNumbers[i],
								nodeIndex = j,
								totalNodesInRoom = #nodes
							})
							nodeMap[nodeKey] = true
						end
					end
				end
			end
		else
			for i = 1, #roomNumbers do
				local room = Workspace.CurrentRooms:FindFirstChild(tostring(roomNumbers[i]))
				if room then
					local nodes = getOrderedNodes(room)
					for j = 1, #nodes do
						local node = nodes[j]
						local nodeKey = tostring(roomNumbers[i]) .. "_" .. node.Name
						if not nodeMap[nodeKey] then
							table.insert(allNodes, {
								node = node,
								roomNumber = roomNumbers[i],
								nodeIndex = j,
								totalNodesInRoom = #nodes
							})
							nodeMap[nodeKey] = true
						end
					end
				end
			end
		end
		return allNodes
	end

	local function moveEntityDynamically(movePart, settings, isReversed)
		local lastRoomCount = 0
		local currentNodeIndex = 1
		while true do
			local roomNumbers = getValidRoomNumbers()
			if #roomNumbers == 0 then
				break
			end
			local allNodes = getAllAvailableNodes(roomNumbers, isReversed)
			if currentNodeIndex > #allNodes then
				break
			end
			if #roomNumbers > lastRoomCount then
				lastRoomCount = #roomNumbers
				allNodes = getAllAvailableNodes(roomNumbers, isReversed)
			end
			local nodeData = allNodes[currentNodeIndex]
			if nodeData and nodeData.node and nodeData.node:IsA("BasePart") then
				if nodeData.node.Parent then
					EntityState.isMoving = true
					local targetCF = withHeightOffset(nodeData.node.CFrame, settings.HeightOffset)
					local duration = getTweenTime(movePart.CFrame, targetCF, settings.Speed)
					local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
					local tween = TweenService:Create(movePart, tweenInfo, {CFrame = targetCF})
					tween:Play()
					tween.Completed:Wait()
					EntityState.isMoving = false
				end
			end
			currentNodeIndex = currentNodeIndex + 1
			task.wait(0.01)
		end
	end

	--=== ANIMAÇÃO DE DESAPARECER PARA BAIXO ===--
	local function animateDespawnDown(entityModel, movePart, despawnSettings, onDespawnCallback)
		EntityState.isMoving = true
		if onDespawnCallback and type(onDespawnCallback) == "function" then
			pcall(onDespawnCallback, entityModel)
		end
		local settings = despawnSettings or {}
		local speed = settings.Speed or 30
		local distance = settings.Distance or 50
		local duration = settings.Duration
		local waitAfter = settings.WaitAfter or 0.5
		local easingStyle = settings.EasingStyle or Enum.EasingStyle.Quad
		local easingDirection = settings.EasingDirection or Enum.EasingDirection.In
		local tweenDuration
		if duration and duration > 0 then
			tweenDuration = duration
		else
			tweenDuration = distance / speed
		end
		tweenDuration = math.max(0.1, math.min(tweenDuration, 10))
		local downCF = movePart.CFrame * CFrame.new(0, -distance, 0)
		local tweenInfo = TweenInfo.new(tweenDuration, easingStyle, easingDirection)
		local tween = TweenService:Create(movePart, tweenInfo, {CFrame = downCF})
		print("Entidade " .. entityModel.Name .. " descendo " .. distance .. " studs em " .. tweenDuration .. " segundos")
		tween:Play()
		tween.Completed:Wait()
		EntityState.isMoving = false
		if waitAfter > 0 then
			task.wait(waitAfter)
		end
		entityModel:Destroy()
	end

	--=== FUNÇÃO PARA VERIFICAR SE O JOGADOR ESTÁ SE ESCONDENDO ===--
	local function isPlayerHiding(player)
		local playerInWorkspace = Workspace:FindFirstChild(player.Name)
		if playerInWorkspace and playerInWorkspace:GetAttribute("Hiding") == true then
			return true
		end
		return false
	end

	--=== SISTEMA DE "KILL RANGE" COM TOGGLE, SUPORTE A RESPAWN E VERIFICAÇÃO DE PAREDES ===--
	local function startKillRange(entityModel, movePart, range, canKill, onDeathCallback)
		if not canKill or not range or range <= 0 then return end
		local deathDebounce = {}
		local function onCharacterAdded(player)
			deathDebounce[player] = nil
		end
		local charConns = {}
		for _, player in ipairs(Players:GetPlayers()) do
			charConns[player] = player.CharacterAdded:Connect(function()
				onCharacterAdded(player)
			end)
		end
		local plrConn
		plrConn = Players.PlayerAdded:Connect(function(player)
			charConns[player] = player.CharacterAdded:Connect(function()
				onCharacterAdded(player)
			end)
		end)
		local function hasLineOfSight(startPos, endPos, ignoreList)
			local direction = (endPos - startPos)
			local distance = direction.Magnitude
			local raycastParams = RaycastParams.new()
			raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
			raycastParams.FilterDescendantsInstances = ignoreList or {}
			local raycastResult = Workspace:Raycast(startPos, direction, raycastParams)
			if not raycastResult then
				return true
			end
			if raycastResult.Distance >= distance then
				return true
			end
			return false
		end
		local killConn
		killConn = RunService.Heartbeat:Connect(function()
			if not EntityState.isMoving then
				return
			end
			for _, player in ipairs(Players:GetPlayers()) do
				local character = player.Character
				local humRoot = character and character:FindFirstChild("HumanoidRootPart")
				local hum = character and character:FindFirstChild("Humanoid")
				if humRoot and hum and hum.Health > 0 then
					local dist = (movePart.Position - humRoot.Position).Magnitude
					if dist <= range and not deathDebounce[player] then
						if isPlayerHiding(player) then
							continue
						end
						local ignoreList = {entityModel, character}
						if hasLineOfSight(movePart.Position, humRoot.Position, ignoreList) then
							deathDebounce[player] = true
							if onDeathCallback and type(onDeathCallback) == "function" then
								pcall(onDeathCallback, player, character, hum, entityModel)
							end
							hum.Health = 0
						end
					end
				end
			end
		end)
		entityModel.Destroying:Connect(function()
			if killConn then killConn:Disconnect() end
			if plrConn then plrConn:Disconnect() end
			for _, conn in pairs(charConns) do
				conn:Disconnect()
			end
		end)
	end

	--=== POSIÇÃO INICIAL BASEADA EM PRIMEIRO NODE ===--
	local function setStartPosition(movePart, roomNumbers, settings, isReversed)
		if not isReversed then
			-- Aparece no primeiro node da PRIMEIRA sala
			for i = 1, #roomNumbers do
				local startRoom = Workspace.CurrentRooms:FindFirstChild(tostring(roomNumbers[i]))
				if startRoom then
					local nodes = getOrderedNodes(startRoom)
					if #nodes > 0 then
						movePart.CFrame = withHeightOffset(nodes[1].CFrame, settings.SpawnHeightOffset)
						return
					end
				end
			end
		else
			-- Reversed: começa no último node da última sala
			for i = #roomNumbers, 1, -1 do
				local startRoom = Workspace.CurrentRooms:FindFirstChild(tostring(roomNumbers[i]))
				if startRoom then
					local nodes = getOrderedNodes(startRoom)
					if #nodes > 0 then
						movePart.CFrame = withHeightOffset(nodes[#nodes].CFrame, settings.SpawnHeightOffset)
						return
					end
				end
			end
		end
	end

	--=== FUNÇÃO PRINCIPAL DE SPAWN ===--
	local function spawnEntity(settings)
		local customEntityName = settings.Name or "EntityModel"
		local EntityM = game:GetObjects(settings.Model)[1]
		if not EntityM then
			warn("Entity model not found!")
			return
		end
		EntityM.Name = customEntityName
		EntityM.Parent = Workspace

		local roomNumbers = getValidRoomNumbers()
		if #roomNumbers == 0 then
			warn("Nenhuma sala encontrada!")
			EntityM:Destroy()
			return
		end

		local movePart = getMovePart(EntityM)
		if not movePart then
			warn("Nenhuma parte movimentável encontrada no modelo da entidade!")
			EntityM:Destroy()
			return
		end

		initializeLightSystem()
		initializeShakeSystem()
		if settings.LightFlicker.Enabled and settings.LightFlicker.OnSpawn then
			flickerAllRooms(settings.LightFlicker.Duration)
		end
		startKillRange(EntityM, movePart, settings.KillRange, settings.Killable, settings.OnDeath)
		startLightBreaking(EntityM, movePart, settings)
		startLightFlicker(EntityM, movePart, settings)
		startShakeSystem(EntityM, movePart, settings.ShakeSettings)
		if settings.OnEntitySpawn and type(settings.OnEntitySpawn) == "function" then
			pcall(settings.OnEntitySpawn, EntityM, movePart)
		end

		coroutine.wrap(function()
			local isReversed = settings.Reversed
			local rebounding = settings.Rebounding and settings.Rebounding.Enabled
			local minRebounds = (settings.Rebounding and settings.Rebounding.MinTimes) or 1
			local maxRebounds = (settings.Rebounding and settings.Rebounding.MaxTimes) or minRebounds
			local reboundDelay = settings.Rebounding and settings.Rebounding.Delay or 0
			setStartPosition(movePart, roomNumbers, settings, isReversed)
			EntityState.isMoving = false
			task.wait(settings.WaitTime)
			if rebounding and maxRebounds > 0 then
				local rebounds = minRebounds
				if maxRebounds > minRebounds then
					rebounds = math.random(minRebounds, maxRebounds)
				end
				for rep = 1, rebounds do
					roomNumbers = getValidRoomNumbers()
					moveEntityDynamically(movePart, settings, isReversed)
					if reboundDelay and reboundDelay > 0 then
						EntityState.isMoving = false
						task.wait(reboundDelay)
					end
					if rep == rebounds then
						animateDespawnDown(EntityM, movePart, settings.DespawnSettings, settings.OnEntityDespawning)
						warn(EntityM.Name .. " DESAPARECEU ANIMANDO PARA BAIXO após rebotes ("..tostring(rebounds)..")!")
						return
					end
					roomNumbers = getValidRoomNumbers()
					moveEntityDynamically(movePart, settings, not isReversed)
					if rep < rebounds and reboundDelay and reboundDelay > 0 then
						EntityState.isMoving = false
						task.wait(reboundDelay)
					end
				end
				animateDespawnDown(EntityM, movePart, settings.DespawnSettings, settings.OnEntityDespawning)
				warn(EntityM.Name .. " terminou todos os rebotes ("..tostring(rebounds)..") e sumiu ANIMANDO PARA BAIXO.")
			else
				roomNumbers = getValidRoomNumbers()
				moveEntityDynamically(movePart, settings, isReversed)
				animateDespawnDown(EntityM, movePart, settings.DespawnSettings, settings.OnEntityDespawning)
				warn(EntityM.Name .. " terminou o movimento e sumiu ANIMANDO PARA BAIXO.")
			end
		end)()
	end

	spawnEntity(Entity)
end
